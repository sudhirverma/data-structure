// https://leetcode.com/problems/unique-paths-ii/

// [[0,0,0,0],
//  [0,1,0,0],
//  [0,0,0,1],
//  [0,0,1,0],
//  [0,0,0,0]]
const findUniquePath = (m, n, obstacleGrid, caches) => {
    if( obstacleGrid[m]?.[n] === undefined || obstacleGrid[m][n] === 1) {
        return 0;
    }
    if (m === obstacleGrid.length-1 && n === obstacleGrid[0].length-1) {
        return 1
    }
    const key = `${m},${n}`;
    if(caches[key] !== undefined) {
        return caches[key];
    }
    const right = findUniquePath(m, n+1, obstacleGrid, caches);
    const down = findUniquePath(m+1, n, obstacleGrid, caches)
    caches[key] =  right + down;
    return caches[key];
}

var uniquePathsWithObstacles = function(obstacleGrid) {
    if (obstacleGrid[obstacleGrid.length-1][obstacleGrid[0].length-1] !==0) return 0;
    return findUniquePath(0, 0, obstacleGrid, caches = {});
};

// let obstacleGrid = [[0,0,0,0],[0,1,0,0],[0,0,0,1],[0,0,1,0],[0,0,0,0]]

let obstacleGrid = 
[[0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0],
 [1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,0,1],
 [0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0],
 [0,0,0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0],
 [1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0],
 [0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
 [1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0],
 [0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0],
 [0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0],
 [0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1],
 [0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1],
 [1,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,1,0],
 [0,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,1,0],
 [0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0],
 [0,0,0,0,0,0,1,0,1,0,0,1,0,1,1,1,0,0],
 [0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1],
 [0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0],
 [1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0],
 [0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
 [0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0],
 [1,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1],
 [1,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0]]
const result = uniquePathsWithObstacles(obstacleGrid);
console.log(result);